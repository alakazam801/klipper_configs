# ================================================================================
# GCode Macros:
# These macros intercept gcode and replace them with the macro defined.
# GCode WIKI: https://reprap.org/wiki/G-code
# ================================================================================

# ================================================================================
# Power On Macros
# ================================================================================
[delayed_gcode Power_On]
initial_duration: 5
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Welcome"
    RESPOND TYPE=command MSG="action:prompt_text Do you want to level the gantry?"
    RESPOND TYPE=command MSG="action:prompt_footer_button NO|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button YES|G34|error|"
    RESPOND TYPE=command MSG="action:prompt_show"  

#[delayed_gcode welcome]
#initial_duration: 5.
#gcode:
#  M117 Welcome!
#  G34

# ================================================================================
# Start/End Gcodes ( add to slicer start gcode BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} )
# ================================================================================

[gcode_macro START_PRINT]
gcode:
  LED_HEATER
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  M117 Homing
  #G4 P2000
  #SET_GCODE_OFFSET Z=0.0
  #G34
  #G28 X Y
  #Attach_Probe_Lock
  #G28 Z 
  #BED_MESH_PROFILE LOAD=PEI_FIX
  M117 Waiting for temperature
  M140 S{BED_TEMP}
  {% if printer.heater_bed.temperature > params.BED_TEMP|float %}
  {% set min_bed = BED_TEMP-2 %}
  {% set max_bed = BED_TEMP+5 %}
      M140 S{BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      M190 S{BED_TEMP}
  {% else %}
      M190 S{params.BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      M190 S{BED_TEMP}
  {% endif %}
  #SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0
  #SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=0
  #Z_TILT_ADJUST
  #G28 Z
  #Smart_Park
  BED_MESH_CALIBRATE ADAPTIVE=1
  Dock_Probe_Unlock
  VORON_PURGE
  LED_OFF
  SET_LED_EFFECT EFFECT=print_light
  SET_LED_EFFECT EFFECT=printing
  M117 Printing...
  
[gcode_macro END_PRINT]
gcode:
  #Get Printer built volume dimensions
  {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
  LED_HEATER
  #Fix-up extruder
  G91                                            
  G1 E-1 F2700                                    
  G1 E-1.5 Z0.2 F2400                        
  G1 X5 Y5 F6000                               
  G1 Z10                                     
  G90
  SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0
  #Present print
  G1 Z{printer.toolhead.position.z + 10} F600
  #G1 X{X_MAX / 2} Y225 F6000
  G1 X0 Y225 F6000
  M106 S0                                      
  M104 S0                                       
  M140 S0                                 
  #Disable Steppers
  #M84 X Y E
  SET_LED_EFFECT EFFECT=part_ready
  M117 Finished

[gcode_macro PRIME_LINE]
gcode:
  M117 Prime Line
  G92 E0
  G1 Z2.2 F3000
  G1 X2 Y1.1 Z0.28 F5000.0
  G1 X180 Y1.1 Z0.28 F1500.0 E15
  G1 X180 Y1.8 Z0.28 F5000.0
  G1 X18 Y1.8 Z0.28 F1500.0 E30
  G92 E0

#================================================================================
# Temperature Wait
#================================================================================

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

#================================================================================
# Idle Timeout
#================================================================================

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="printer", state="off"
  )}
  
[delayed_gcode delayed_printer_off]
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}
initial_duration: 0

#================================================================================
# Bed Level G29
#================================================================================

[gcode_macro LEVEL]
gcode:
  SCREWS_TILT_CALCULATE

# Mechanical gantry calibration
[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
   {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current as required without fighting config.
   {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %} ; TODO: Find runtime current settings
   {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
   {% set x_max = printer.toolhead.axis_maximum.x %} 
   {% set y_max = printer.toolhead.axis_maximum.y %} 
   {% set z_max = printer.toolhead.axis_maximum.z %} 

   RESPOND TYPE=command MSG=action:prompt_end
   G28 X Y
   Attach_Probe_Lock
   G28 z
   G90 ; absolute
   G0 X{x_max / 2} Y{y_max / 2} F3600
   G0 Z{z_max - 2} F1200
   SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
   SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
   G4 P200 ; Probably not necessary, it is here just for sure
   FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=6
   FORCE_MOVE STEPPER=stepper_z1 DISTANCE=5 VELOCITY=6
   G4 P200 ; 
   FORCE_MOVE STEPPER=stepper_z DISTANCE=-2 VELOCITY=6
   FORCE_MOVE STEPPER=stepper_z1 DISTANCE=-2 VELOCITY=6
   G4 P200 ; same as the first one
   SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
   SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
   G4 P200 ; same as the first one
   G0 Z 10 F1600
   G28 Z
   G0 Y 0 F3600

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

#================================================================================
# Filament Change / Filament Sensor
#================================================================================

[delayed_gcode DISABLE_FILAMENTSENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0
initial_duration: 1

[delayed_gcode ENABLE_FILAMENTSENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=1
initial_duration: 60

[gcode_macro M600]
gcode:
    DISABLE_FILAMENTSENSOR
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F9000
    G1 E15 F600
    G1 E-75 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    
#================================================================================
# Fan Control Thing
#================================================================================

[gcode_macro M106]
rename_existing: M106.0001
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    {% if m106.enable_override %}
        # S = The raw value that the slicer set for power
        # this is a floating point value from 0 to MAX_FLOAT.
        # It is cast to a float and divided by 255.0 to get the fan power as a float from 0.0 to MAX_FLOAT.
        # see: https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L68
        # if you dont specify S, 255.0 is the default value
        {% set S = params.S | default(255.0) %}

        # if S looks invalid, call the base macro implementation to generate the native error messages:
        {% if (S | float(-9999.9999) == -9999.9999) or (S | float < 0.0) %}
            # DEBUG
            # {action_respond_info("M106 input looks invalid")}
            M106.0001 S{S}
        {% else %}
            # klippy doesnt error if you submit a value larger than 255, it just caps it here https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L51
            # so we similarly cap it here
            {% set computed_s = (255.0, S | float) | min %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={computed_s}
            {% set fan_power = (computed_s / 2.55) %}  # fan power are a percentage

            # Only perform mapping on the value 0.0 if always is ON
            {% if fan_power != 0.0 or m106.always == "ON" %}
                # perform a mapping from [from_min, from_max] to [to_min, to_max]
                {% set map_from = [m106.from_min, m106.from_max] %}
                {% set map_to = [m106.to_min, m106.to_max] %}
                {% if fan_power < m106.from_min %}
                    # perform a mapping from [0, from_min] to [([0.0, to_min] | min), to_min]
                    {% set map_from = [0.0, m106.from_min] %}
                    {% set map_to = [([0.0, m106.to_min] | min), m106.to_min] %}
                {% elif fan_power > m106.from_max %}
                    # perform a mapping from [from_max, 100.0] to [to_max, ([100.0, to_min] | max)]
                    {% set map_from = [m106.from_max, 100.0] %}
                    {% set map_to = [m106.to_max, ([100.0, m106.to_min] | max)] %}
                {% endif %}
                # mapping math
                {% set fan_power = map_to[0] + ((map_to[1] - map_to[0]) / (map_from[1] - map_from[0])) * (fan_power - map_from[0]) %}
                # clamp to [0.0 100.0]
                {% set fan_power = [0.0, ([100.0, fan_power] | min)] | max %}
            {% endif %}

            # apply min/max limits
            {% set fan_power = [m106.max_power, ([m106.min_power, fan_power] | max)] | min %}

            # fan always on/off
            # get the off_below value of the fan.
            {% set fan_off_below = (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100.0 %}
            # fan always on means the fan must always run
            {% if m106.always == "ON" and fan_power < fan_off_below %}
                # fan power must be at least the fan_off_below value
                {% set fan_power = fan_off_below %}
            # fan always off means the fan never runs
            {% elif m106.always == "OFF" %}
                {% set fan_power = 0.0 %}
            {% endif %}

            # DEBUG
            # {action_respond_info("Slicer fan power overridden %.1f -> %.1f" % (computed_s, fan_power * 2.55))}
            M106.0001 S{fan_power * 2.55}
        {% endif %}
    {% else %}
        M106.0001 {% for p in params%}{'%s%s ' % (p, params[p])}{% endfor %}

        # save the value after calling base implementation, so if the above line throws an error this one never runs
        {% if params.S is defined %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={params.S | float}
        {% endif %}
    {% endif %}

[gcode_macro ADJUST_M106]
variable_print_fan: "fan"
variable_last_s: 0.0
variable_min_power: 0.0
variable_max_power: 100.0
variable_always: "SLICER"   # 'SLICER' | 'ON' | 'OFF'
variable_from_min: 0.0
variable_from_max: 100.0
variable_to_min: 0.0
variable_to_max: 100.0
variable_enable_override: False
description: Modifies the behaiour of the M106 command to adjust or oeverride fan power settings from your slicer
gcode:
    {% set ENABLED = params.ENABLED | default(none) %}
    # if you call to apply a settings change it is assumed you want that setting applied immediatly
    # so ENABLED=true is assumed if the ENABLED parameter is omitted
    {% set ENABLED = (ENABLED is none) or ((ENABLED | string | lower) in ('1', 'true', 'on')) %}

    # set the fan
    {% set FAN = params.FAN | default(none) %}
    {% if not FAN is none %}
        {% set FAN = FAN | string %}
        {% if not FAN in printer or not FAN in printer["configfile"]["config"] %}
            {action_raise_error("No fan named '%s' found in the printer's config" % (FAN))}
        {% endif %}
    {% endif %}

    # max power must be more than min power
    {% set MAX = params.MAX | default(none) %}
    {% if not MAX is none %}
        {% set MAX = [100.0, [0.0, (MAX | float)] | max] | min %}
    {% endif %}

    {% set MIN = params.MIN | default(none) %}
    {% if not MIN is none %}
        {% set MIN = [100.0, [0.0, (MIN | float)] | max] | min %}
    {% endif %}

    {% if (not MAX is none) and (not MIN is none) and MAX < MIN %}
        {action_raise_error("MAX power must be greater than MIN power")}
    {% endif %}

    # ALWAYS=ON, ALWAYS=OFF, ALWAYS=SLICER
    {% set ALWAYS = params.ALWAYS | default(none) %}
    {% if not ALWAYS is none %}
        {% set ALWAYS = ALWAYS | string | upper %}
        {% if ALWAYS not in ("ON", "OFF", "SLICER") %}
            {action_raise_error("ALWAYS can be one of: 'SLICER', 'ON' or 'OFF'")}
        {% endif %}
    {% endif %}

    # Format is: either a number or adjust_value|threashold, e.g. ADJUST_HIGH=10|50 would increase fan values by 10 at/above 50
    {% set ADJUST = params.ADJUST | default(none) %}
    {% if not ADJUST is none %}
        {% set from_min = 0.0 %}
        {% set from_max = 100.0 %}
        {% set to_min = 0.0 %}
        {% set to_max = 100.0 %}
        {% if ADJUST | float(-99999.9999) != -99999.9999 %}
            {% set to_min = 0.0 + (ADJUST | float) %}
            {% set to_max = 100.0 + (ADJUST | float) %}
        {% else %}
            {% set split_adjust = (ADJUST | string).split("|") %}
            {% if (split_adjust | length) != 2 %}
                {action_raise_error("ADJUST format error, missing '|', expected 'n->n|n->n'")}
            {% endif %}
            {% if split_adjust[0] | length > 0 %}
                {% set split_low = (split_adjust[0]).split("->") %}
                {% if (split_low | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the minimum mapping")}
                {% endif %}
                {% set from_min = split_low[0] | float %}
                {% if from_min > 100.0 or to_min < 0.0 %}
                    {action_raise_error("ADJUST value error, minimum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_min = split_low[1] | float %}
                {% if to_min > 200.0 or to_min < -100.0 %}
                    {action_raise_error("ADJUST value error, minimum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}

            {% if split_adjust[1] | length > 0 %}
                {% set split_high = (split_adjust[1]).split("->") %}
                {% if (split_high | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the maximum mapping")}
                {% endif  %}
                {% set from_max = split_high[0] | float %}
                {% if from_max > 100.0 or from_max < 0.0 %}
                    {action_raise_error("ADJUST value error, maximum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_max = split_high[1] | float %}
                {% if to_max > 200.0 or to_max < -100.0%}
                    {action_raise_error("ADJUST value error, maximum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}
        {% endif %}
        # the 2 from extents cant cross
        {% if from_min > from_max %}
            {action_raise_error("ADJUST value error, minimum from value must be less than or equal to the maximum from value")}
        {% endif %}
        {% if to_min > to_max %}
            {action_raise_error("ADJUST value error, minimum to value must be less than or equal to the maximum to value")}
        {% endif %}
    {% endif %}

    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    # all parameter unpacking and checking has been completed, save anything that was set
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=enable_override VALUE={ENABLED}
    {% if not FAN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=print_fan VALUE="'{FAN}'"
    {% endif%}
    {% if not MAX is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=max_power VALUE={MAX}
    {% endif %}
    {% if not MIN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=min_power VALUE={MIN}
    {% endif %}
    {% if not ALWAYS is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=always VALUE="'{ALWAYS}'"
    {% endif %}
    {% if not ADJUST is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_min VALUE={from_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_max VALUE={from_max}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_min   VALUE={to_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_max   VALUE={to_max}
    {% endif %}

    # apply settngs to fan now
    M106 S{m106.last_s}

    # show results of changes:
    SHOW_M106

[gcode_macro SHOW_M106]
description: Show all settings in M106
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {action_respond_info("Part Cooling Override Info. Enabled?: %s, Fan: %s (off below %.1f%%)" % (m106.enable_override, m106.print_fan, (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100))}
    {action_respond_info("Min Power: %.1f%%, Max Power: %.1f%%, Always On: %s" % (m106.min_power, m106.max_power, m106.always))}
    {% if m106.from_min == 0.0 and m106.from_max == 100.0 and  m106.to_min == (m106.to_max - 100.0) %}
        {action_respond_info("Power Adjustment: %.1f%%" % (m106.to_min))}
    {% else %}
        {action_respond_info("Power Mapping: %.1f%% -> %.1f%% : %.1f%% -> %.1f%%" % (m106.from_min, m106.to_min, m106.from_max, m106.to_max))}
    {% endif %}
    {action_respond_info("Slicer power setting: %.1f%% (%.1f), Actual fan power: %.1f%% (%.1f)" % (m106.last_s / 2.55, m106.last_s, (printer[m106.print_fan].speed) * 100.0, (printer[m106.print_fan].speed) * 255.0))}

[gcode_macro RESET_M106]
description: Reset all settings to defaults found in ADJUST_M106
gcode:
    ADJUST_M106 MIN=0 MAX=100 ADJUST=0 ALWAYS=SLICER ENABLED=FALSE

[gcode_macro M107]
rename_existing: M107.0001
description: Overrides the M107 command to stop the slicer from shutting off the fan if so configured
gcode:
    # calling M107 implies the slicer wants 0 fan speed
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE=0.0
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {% if m106.enable_override is false or m106.always != "ON" %}
        M107.0001
    {% endif %}
    
#================================================================================
# Extras
#================================================================================

[gcode_macro Stepper_Buzz_Cycle]
gcode:
    M117 Stepper Buzz Cycle in 10 Seconds!
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper X! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_x
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Y! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_y
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Z! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Z1! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z1
    M117 CYCLE COMPLETE!
    G4 P6000
    M117
	
[gcode_macro PID_Extruder]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(200)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[gcode_macro PID_Bed]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
  
[gcode_macro Probe_Z_Calibrate]
gcode:
    M117 PROBE Z CALIBRATE! PLEASE WAIT!
    G28
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=220
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=63
    M117 HEATING PRINTER! PLEASE WAIT!
    M109 S220
    M190 S63
    PROBE_CALIBRATE

[gcode_macro Auto_Shaper_X]
gcode: 
    G28
    SHAPER_CALIBRATE AXIS=X

[gcode_macro Auto_Shaper_Y]
gcode: 
    G28
    SHAPER_CALIBRATE AXIS=Y

[gcode_macro PSTATUS]
gcode:
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set	info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}

[gcode_macro Axis_Break_In]
gcode:
; call with Axis_Break_In AXIS=?? FR= ?? MIN=?? MAX=?? TIMES=4 HOME=1
;home = 1 will make it home even if the printer thinks we are already homed
; if TIMES is excluded set the default number of moves below in the FOR I IN RANGE line
; I added a few variables so that you can use for any axis with any limit you desire, if you Z can travel 290 but X and Y only 235
; you can call it here MIN isn't requried if you omit it will use 0 since every printer can travel to 0 *one would hope!
; I also decided to make a default speed of 1500, feel free to edit

  {% if 'AXIS' in params and 'MAX' in params %}
    {% set Axis = params.AXIS %}
    {% set FR = params.FR|default(1500)|int %}
    {% set min = params.MIN|default(0)|int %}
    {% set max = params.MAX|int %} ;set all variables needed
    {% if printer.toolhead.homed_axes != "xyz" or params.HOME == "1" %} ;if all axis already home, skip the home
      {% if Axis == "Z" %} ;on printers with a sensor XY must be homed first, so just do a full home
        G28
      {% else %}
        G28 {Axis} ;home induvidual X or Y 
      {% endif %}
    {% endif %}
     {% for i in range(params.TIMES|default(2)|int) %} ;start the loop, default 2 times if not specified in params
      G1 {Axis}{min} F{FR}
      G1 {Axis}{max} F{FR}
    {% endfor %}
  {% endif %}```

#
# DUMP_WARNINGS
# Parse the printer config file and dump any warnings to the console

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}
