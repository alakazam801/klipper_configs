# ================================================================================
# GCode Macros:
# These macros intercept gcode and replace them with the macro defined.
# GCode WIKI: https://reprap.org/wiki/G-code
# ================================================================================

# ================================================================================
# Start/End Gcodes ( add to slicer start gcode BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} )
# ================================================================================

[gcode_macro START_PRINT]
gcode:
  LED_HEATER
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  M117 Homing
  G4 P2000
  #SET_GCODE_OFFSET Z=0.0
  G28 X Y
  Attach_Probe_Lock
  G28 Z 
  Z_TILT_ADJUST
  #BED_MESH_PROFILE LOAD=PEI_FIX
  M117 Waiting for temperature
  M140 S{BED_TEMP}
  {% if printer.heater_bed.temperature > params.BED_TEMP|float %}
  {% set min_bed = BED_TEMP-2 %}
  {% set max_bed = BED_TEMP+5 %}
      M140 S{BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      M190 S{BED_TEMP}
  {% else %}
      M190 S{params.BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      M190 S{BED_TEMP}
  {% endif %}
  Smart_Park
  BED_MESH_CALIBRATE ADAPTIVE=1
  Dock_Probe_Unlock
  VORON_PURGE
  SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=1
  LED_OFF
  SET_LED_EFFECT EFFECT=print_light
  SET_LED_EFFECT EFFECT=printing
  M117 Printing...
  
[gcode_macro END_PRINT]
gcode:
  #Get Printer built volume dimensions
  {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
  LED_HEATER
  #Fix-up extruder
  G91                                            
  G1 E-8 F2700                                    
  G1 E-1.5 Z0.2 F2400                        
  G1 X5 Y5 F6000                               
  G1 Z10                                     
  G90
  SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0
  #Present print
  G1 Z{printer.toolhead.position.z + 10} F600
  G1 X{X_MAX / 2} Y225 F6000
  M106 S0                                      
  M104 S0                                       
  M140 S0                                 
  #Disable Steppers
  M84 X Y E
  SET_LED_EFFECT EFFECT=part_ready
  M117 Finished

[gcode_macro PRIME_LINE]
gcode:
  M117 Prime Line
  G92 E0
  G1 Z2.2 F3000
  G1 X2 Y1.1 Z0.28 F5000.0
  G1 X180 Y1.1 Z0.28 F1500.0 E15
  G1 X180 Y1.8 Z0.28 F5000.0
  G1 X18 Y1.8 Z0.28 F1500.0 E30
  G92 E0
  
#================================================================================
# Idle Timeout
#================================================================================

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="printer", state="off"
  )}
  
[delayed_gcode delayed_printer_off]
initial_duration: 0
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}
  
#================================================================================
# Bed Level G29
#================================================================================

[gcode_macro LEVEL]
gcode:
  SCREWS_TILT_CALCULATE

#================================================================================
# Filament Change / Filament Sensor
#================================================================================

[delayed_gcode DISABLE_FILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0

[delayed_gcode ENABLE_FILAMENTSENSOR]
initial_duration: 60
gcode:
    SET_FILAMENT_SENSOR SENSOR=Runout_Sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=1
    
[gcode_macro M600]
gcode:
    DISABLE_FILAMENTSENSOR
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F9000
    G91
    G1 E25 F600
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state
	
#================================================================================
# Extras
#================================================================================

[gcode_macro Stepper_Buzz_Cycle]
gcode:
    M117 Stepper Buzz Cycle in 10 Seconds!
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper X! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_x
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Y! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_y
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Z! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z
    M400
    M117 Stepper Buzz Cycle in 10 Seconds
    G4 P5000
    M117 5 Seconds!
    G4 P3000
    M117 Stepper Z1! READY GO!
    G4 P2000
    STEPPER_BUZZ STEPPER=stepper_z1
    M117 CYCLE COMPLETE!
    G4 P6000
    M117
	
[gcode_macro PID_Extruder]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(200)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[gcode_macro PID_Bed]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
  
[gcode_macro Probe_Z_Calibrate]
gcode:
    M117 PROBE Z CALIBRATE! PLEASE WAIT!
    G28
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=220
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=63
    M117 HEATING PRINTER! PLEASE WAIT!
    M109 S220
    M190 S63
    PROBE_CALIBRATE

[gcode_macro Auto_Shaper_X]
gcode: 
    G28
    SHAPER_CALIBRATE AXIS=X

[gcode_macro Auto_Shaper_Y]
gcode: 
    G28
    SHAPER_CALIBRATE AXIS=Y

[gcode_macro PSTATUS]
gcode:
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set	info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}


#
# DUMP_WARNINGS
# Parse the printer config file and dump any warnings to the console

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}
